руководство по стилю SQL https://www.sqlstyle.guide/ru/
отформатировать ваш запрос с помощью https://codebeautify.org/sqlformatter
MySQL, версия 8.0.21.

Хороший стиль
Идентификаторы и имена. Осмысленные и в едином стиле.
Пробелы и отступы. Логично расставленные для лучшей читаемости кода.
Дата и время. Соответствующие стандарту ISO 8601: YYYY-MM-DD HH:MM:SS.SSSSS.
Функции SQL. Стандартные вместо специфичных (определяемых поставщиком) с целью лучшей переносимости.
Код. Лаконичный и без излишеств, как например: ненужные кавычки или скобки или неуместное использование оператора WHERE.
Комментарии. Предпочтительно в стиле C — /* (начало) и */ (конец). Либо -- перед комментарием, тогда окончанием будет новая строка.

Общее
Убедитесь в том, что имя уникально и его нет в списке зарезервированных ключевых слов.
Ограничивайте длину имени 30 байтами (это 30 символов, если не используется многобайтный набор символов).
Начинайте имена с буквы и не заканчивайте их символом подчёркивания.
Используйте в именах только буквы, цифры и символ подчёркивания.
Избегайте нескольких подряд идущих символов подчёркивания.
Используйте символ подчёркивания там, где вы бы поставили пробел в реальной жизни (например, first name станет first_name).
Избегайте сокращений. Если их всё же нужно использовать, убедитесь в том, что они общепонятны.

Универсальные суффиксы
Приведённые ниже суффиксы универсальны, что гарантирует простоту понимания значения столбцов из кода SQL.

_id — уникальный идентификатор, например первичный ключ.
_status — флаг или любой статус, например publication_status.
_total — общее количество или сумма значений.
_num — поле, содержащее число.
_name — любое имя, например first_name.
_seq — непрерывная последовательность значений.
_date — колонка, содержащая дату.
_tally — счётчик.
_size — размер или величина чего-либо, например размер файла.
_addr — физический или абстрактный адрес, например ip_addr.

Пробелы
Можно и нужно использовать пробелы для выравнивания основных ключевых слов по их правому краю. В типографике получающиеся таким образом «коридоры» 
стараются избегать, в то же время в нашем случае они, напротив, помогают лучше вычленять важные ключевые слова.

Обратите внимание, что ключевые слова SELECT, FROM и т.д. выровнены по правому краю, при этом названия столбцов и различные условия — по левому.

Помимо этого, старайтесь расставлять пробелы:

до и после знака равно (=)
после запятых (,)
до открывающего и после закрывающего апострофов ('), если последний не внутри скобок, или без последующих запятой или точки с запятой, или не в конце строки

Переводы строки
Всегда делайте перенос строки:

перед AND или OR
после точки с запятой (для разделения запросов)
после каждого основного ключевого слова
после запятой (при выделении логических групп столбцов)
Следуя принципу, что ключевые слова выравниваются по правому краю, а всё остальное — по левому, мы добиваемся достаточно удобного расположения частей кода, 
вследствие чего улучшается зрительная навигация по нему.

Отступы
Для того, чтобы SQL был удобочитаем, важно также следовать стандартам расстановки отступов.

JOIN
Объединения (JOIN) должны располагаться по правую часть «коридора». При необходимости между ними можно добавить пустую строку.

Подзапросы
Подзапросы тоже должны быть выровнены по правому краю «коридора», а внутри них самих применяются те же правила форматирования, что и в любом другом запросе. Если используются вложенные подзапросы, может 
иметь смысл поставить закрывающую скобку на новой строке ровно под парной ей открывающей скобкой.

Формальные тонкости
Используйте BETWEEN, где возможно, вместо нагромождения условий AND.
Таким же образом старайтесь использовать IN() вместо OR.
Используйте CASE, если значение должно быть интерпретировано до окончания выполнения запроса. С помощью CASE можно также формировать сложные логические структуры.
По возможности избегайте использования UNION и временных таблиц.

SELECT 'столбцы или * для выбора всех столбцов; обязательно'
FROM 'таблица; обязательно'
WHERE 'условие/фильтрация, например, city = 'Moscow'; необязательно'
GROUP BY 'столбец, по которому хотим сгруппировать данные; необязательно'
HAVING 'условие/фильтрация на уровне сгруппированных данных; необязательно'
ORDER BY 'столбец, по которому хотим отсортировать вывод; необязательно'
