Выборка всех данных из таблицы
Для того чтобы отобрать все данные из таблицы используется SQL запрос следующей структуры: 
ключевое слово SELECT; 
символ « *» ; 
ключевое слово FROM; 
имя таблицы.
Результатом является таблица, в которую включены все строки и столбцы указанной в запросе таблицы.

Пример
Выбрать все записи таблицы book .

Запрос:
SELECT * FROM book;

Выборка отдельных столбцов
Для того чтобы отобрать данные из определенных столбцов таблицы используется SQL запрос следующей структуры: 
ключевое слово SELECT ; 
список столбцов таблицы через запятую; 
ключевое слово FROM ; 
имя таблицы.
Результатом является таблица, в которую включены все данные из указанных после SELECT столбцов исходной таблицы.

Пример
Выбрать названия книг и их количества из таблицы book .

Запрос:
SELECT title, amount FROM book;

Выборка новых столбцов и присвоение им новых имен
Для того чтобы отобрать данные из определенных столбцов таблицы и одновременно задать столбцам новые имена используется SQL запрос следующей структуры: 
ключевое слово SELECT ; 
имя столбца;
ключевое слово AS ; 
новое название столбца (можно русскими буквами), но это должно быть одно слово, если название состоит из двух слов – соединяйте их подчеркиванием, 
например, Количество_книг ; 
запятая; 
имя столбца; 
.... 
ключевое слово FROM ; 
имя таблицы.
В одном запросе можно использовать и имена столбцов из таблицы, и новые названия.
Результатом является таблица, в которую включены все данные из указанных после SELECT столбцов исходной таблицы. 
Каждому столбцу присваивается новое имя, заданное после AS, или столбец получает имя столбца исходной таблицы, если AS отсутствует.
Пример
Выбрать все названия книг и их количества из таблицы book , для столбца title задать новое имя Название.

Запрос:
SELECT title AS Название, amount 
FROM book;

Выборка данных с созданием вычисляемого столбца
С помощью SQL запросов можно осуществлять вычисления по каждой строке таблицы с помощью вычисляемого столбца. 
Для него в списке полей после оператора SELECT указывается выражение и задается имя.
Выражение может включать имена столбцов, константы, знаки операций, встроенные функции.
Результатом является таблица, в которую включены все данные из указанных после SELECT столбцов, а также новый столбец, 
в каждой строке которого вычисляется заданное выражение.

Пример
Вывести всю информацию о книгах, а также для каждой позиции посчитать ее стоимость (произведение цены на количество). Вычисляемому столбцу дать имя total .

Запрос:
SELECT title, author, price, amount, 
     price * amount AS total 
FROM book;

Выборка данных, вычисляемые столбцы, математические функции
В SQL реализовано множество  математических функций для работы с числовыми данными. В таблице приведены некоторые из них.

Функция	Описание	Пример
CEILING(x)	возвращает наименьшее целое число, большее или равное x
(округляет до целого числа в большую сторону)	CEILING(4.2)=5
CEILING(-5.8)=-5
ROUND(x, k)	округляет значение x до k знаков после запятой,
если k не указано – x округляется до целого	ROUND(4.361)=4
ROUND(5.86592,1)=5.9
FLOOR(x)	возвращает наибольшее целое число, меньшее или равное x
(округляет до  целого числа в меньшую сторону)	FLOOR(4.2)=4
FLOOR(-5.8)=-6
POWER(x, y)	возведение x в степень y	POWER(3,4)=81.0
SQRT(x)	квадратный корень из x	SQRT(4)=2.0
SQRT(2)=1.41...
DEGREES(x)	конвертирует значение x из радиан в градусы	DEGREES(3) = 171.8...
RADIANS(x)	конвертирует значение x из градусов в радианы	RADIANS(180)=3.14...
ABS(x)	модуль числа x	ABS(-1) = 1
ABS(1) = 1
PI()	pi = 3.1415926...	 
Пояснение.   Существуют разные способы округления чисел. В SQL реализовано математическое округление. Для округления вещественного 
числа нужно в записи числа выбрать разряд в дробной части, до которого производится округление. Цифра, записанная в выбранном разряде: не меняется, если следующая за ней справа цифра - 0, 1, 2, 3 или 4; увеличивается на единицу, если следующая за ней справа цифра - 5,6,7,8 или 9.

Пример 
Для каждой книги из таблицы book вычислим налог на добавленную стоимость (имя столбца tax) , который включен в цену и составляет k = 18%, 
а также цену книги (price_tax) без него. Формулы для вычисления:

tax= {{price *{ k \over 100}} \over {1+{k\over 100}}},
tax= 
1+ 
100
k
 
price∗ 
100
k
 ,

price\_tax= {{price} \over {1+{k\over 100}}}
price_tax= 
1+ 
100
k

price

Запрос:

SELECT title, price, 
    (price*18/100)/(1+18/100) AS tax, 
    price/(1+18/100) AS price_tax 
FROM book;

Выборка данных, вычисляемые столбцы, логические функции
В SQL реализована возможность заносить в поле значение в зависимости от условия. Для этого используется функция IF:

IF(логическое_выражение, выражение_1, выражение_2)
Функция вычисляет логическое_выражение, если оно истина – в поле заносится значение выражения_1,
в противном случае –  значение выражения_2. Все три параметра IF() являются обязательными.
Допускается использование вложенных функций, вместо выражения_1 или выражения_2 может стоять новая функция IF.
Пример 
Для каждой книги из таблицы book установим скидку следующим образом: если количество книг меньше 4, то скидка будет составлять 50% от цены, в противном случае 30%.

Запрос:
SELECT title, amount, price, 
    IF(amount<4, price*0.5, price*0.7) AS sale
FROM book;

Выборка данных по условию
С помощью запросов можно включать в итоговую выборку не все строки исходной таблицы, а только те, которые 
отвечают некоторому условию. Для этого после указания таблицы, откуда выбираются данные, задается ключевое слово WHERE и логическое выражение, 
от результата которого зависит будет ли включена строка в выборку или нет. Если условие – истина, то строка(запись)  включается в выборку, если ложь – нет.
Логическое выражение может включать операторы сравнения (равно «=», не равно «<>», больше «>», меньше «<», больше или равно«>=»,
меньше или равно «<=») и выражения, допустимые в SQL.

Пример
Вывести название и цену тех книг, цены которых меньше 600 рублей.

Запрос:
SELECT title, price 
FROM book
WHERE price < 600;

Выборка данных, логические операции
 Логическое выражение после ключевого слова WHERE кроме операторов сравнения  и выражений может включать  
 логические операции (И «and», ИЛИ «or», НЕ «not») и круглые скобки, изменяющие приоритеты выполнения операций.

Приоритеты операций:
круглые скобки
умножение  (*),  деление (/)
сложение  (+), вычитание (-)
операторы сравнения (=, >, <, >=, <=, <>)
NOT
AND
OR
Пример

Вывести название, автора и цену тех книг, которые написал Булгаков, ценой больше 600 рублей

Запрос:

SELECT title, author, price 
FROM book
WHERE price > 600 AND author = 'Булгаков М.А.';

Выборка данных, операторы BETWEEN, IN
 Логическое выражение после ключевого слова WHERE может включать операторы  BETWEEN и IN. Приоритет  у этих операторов такой же как у операторов сравнения, то есть они выполняются раньше, чем NOT, AND, OR.

Оператор BETWEEN позволяет отобрать данные, относящиеся к некоторому интервалу, включая его границы.

Пример

Выбрать названия и количества тех книг, количество которых от 5 до 14 включительно.

Запрос:

SELECT title, amount 
FROM book
WHERE amount BETWEEN 5 AND 14;

Выборка данных с сортировкой
При выборке можно указывать столбец или несколько столбцов, по которым необходимо отсортировать отобранные строки. Для этого используются ключевые слова ORDER BY, после которых задаются имена столбцов. При этом строки сортируются по первому столбцу, если указан второй столбец, сортировка осуществляется только для тех строк, у которых значения первого столбца одинаковы. По умолчанию ORDER BY выполняет сортировку по возрастанию. Чтобы управлять направлением сортировки вручную, после имени столбца указывается ключевое слово ASC (по возрастанию) или DESC (по убыванию). 

Столбцы после ключевого слова ORDER BY можно задавать:

названием столбца;
номером столбца;
именем столбца (указанным после AS).
Пример

Вывести название, автора и цены книг. Информацию  отсортировать по названиям книг в алфавитном порядке.

Запрос:

SELECT title, author, price
FROM book
ORDER BY title;

Выборка данных, оператор LIKE
Оператор LIKE используется для сравнения строк. В отличие от операторов отношения равно (=) и не равно (<>), 
LIKE позволяет сравнивать строки не на полное совпадение (не совпадение), а в соответствии с шаблоном. 
Шаблон может включать обычные символы и символы-шаблоны. При сравнении с шаблоном, его обычные символы должны в точности совпадать с символами, указанными в строке. 
Символы-шаблоны могут совпадать с произвольными элементами символьной строки.

Символ-шаблон	Описание	Пример
%	Любая строка, содержащая ноль или более символов	SELECT * FROM book WHERE author LIKE '%М.%'
выполняет поиск и выдает все книги, инициалы авторов которых содержат «М.»
_ (подчеркивание)	Любой одиночный символ	SELECT * FROM book WHERE title LIKE 'Поэм_'
выполняет поиск и выдает все книги, названия которых либо «Поэма», либо «Поэмы» и пр.
Пример 1

Вывести названия книг, начинающихся с буквы «Б».

Запрос:

SELECT title 
FROM book
WHERE title LIKE 'Б%';
/* эквивалентное условие 
title LIKE 'б%'
*/

